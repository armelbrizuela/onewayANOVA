---
title: "ANOVA de una vía"
format: 
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: inline
---

```{r}
#| eval: false

install.packages("hypr")
install.packages("broom")
install.packages("readr")
install.packages("dplyr")
install.packages("sjPlot")
install.packages("ggplot2")
install.packages("forcats")
install.packages("effects")
```

```{r}

library(hypr)
library(broom)
library(dplyr)
library(readr)
library(sjPlot)
library(forcats)
library(ggplot2)
library(effects)
```

Hasta ahora hemos trabajado con modelos de uno o más predictores continuos (modelos de regresión).

Ahora abordaremos modelos con predictores categóricos (modelos ANOVA). En este contexto, a los predictores categóricos se les suele llamar **factores**.

Un factor puede tener dos o más categorías, llamadas **niveles** en este contexto.

Ejemplos de factores: **grupo** (control-testPreparational), **región** (urbana-rural), **dosis** (baja-media-alta).

Veamos el ejemplo que se empieza a desarrollar en la página 168 del libro.

# Ejemplo con un factor de dos niveles

```{r}
testPreparation <- read_table("testPreparation.txt")
```

En R, es conveniente transformar los predictores categóricos en vectores tipo `factor`. Adicionalmente, podemos ordernar los niveles del factor para darle prioridad a uno de los niveles.

```{r}
testPreparation <- testPreparation |>
  mutate(Group = fct(Group, levels = c("noCourse", "course")))
```

```{r}
levels(testPreparation$Group)
```

Aunque los niveles de los factores son nombres, R los representa internamente como números.

```{r}
contrasts(testPreparation$Group)
```

A estos números se les llama **códigos de contraste** (*contrast codes*) y determinan cómo se calculan los coeficientes de regresión.

La [teoría matemática](https://cran.r-project.org/web/packages/codingMatrices/vignettes/codingMatrices.pdf) sobre cómo asociar los niveles de un factor a ciertos valores es compleja, por lo que la omitiremos y utilizaremos el paquete **hypr** para crear dichos códigos en términos de comparaciones de medias (en la variable de respuesta) de los grupos definidos por el factor.

La función `contr.hypothesis()` nos permite establecer comparaciones de medias.

```{r}
contrasts(testPreparation$Group) <- contr.hypothesis(
  
  course ~ (noCourse + course)/2,
  
  levels = c("noCourse", "course"))
```

```{r}
contrasts(testPreparation$Group)
```

Vamos a estimar un modelo A(umentado) con un único predictor categórico de dos niveles. El modelo C(ompacto) no incluye ningún predictor, solo el intercepto.

```{r}
modeloC <- lm(SAT ~ 1, data = testPreparation)
modeloA <- lm(SAT ~ 1 + Group, data = testPreparation)
```

Antes de ver los resultados, veamos cón qué números ingresó el predictor `Group` al modelo.

```{r}
model.matrix(modeloA)
```

Comparemos ambos modelos para determinar si el modelo A reduce significativamente el error.

```{r}
anova(modeloC, modeloA) |>
  tidy()
```

Al incorporar `Group` al modelo, la reducción del error es "marginalmente" significativa. También podría concluirse que la reducción del error no es significativa.

Podemos examinar el R cuadrado para conocer la proporción de varianza de la `SAT` que es capaz de "explicar" el modelo A.

```{r}
glance(modeloA) |>
  select(r.squared)
```

Este resultado indica que el modelo A explica aproximadamente el 19.6% de la varianza de `SAT`.

Ahora veamos los coeficientes de regresión y sus respectivos intervalos de confianza.

```{r}
modeloA |>
  tidy(conf.int = TRUE) |>
  select(term, estimate, conf.low, conf.high, p.value) |>
  mutate(p.value = round(p.value, 2))
```

Para entender mejor cómo interpretar los coeficientes del modelo, vamos a **agregar** o **resumir** la variable `SAT` con base en el factor `Group`.

```{r}
resumen <- testPreparation |>
  summarise(.by = Group, medias = mean(SAT)) |>
  mutate(intercepto = mean(medias), pendiente = intercepto - medias)
```

```{r}
ggplot(resumen) +
  geom_point(
    aes(x = Group, y = medias)) +
  geom_hline(
    aes(yintercept = intercepto), linetype = "dotted") +
  geom_segment(
    aes(x="noCourse", xend="noCourse", y=intercepto, yend=intercepto - abs(pendiente))) +
  geom_segment(
    aes(x="course", xend="course", y=intercepto, yend=intercepto + abs(pendiente)))
```

Ahora veamos los resultados si modificamos el tipo de comparación que nos interese realizar.

```{r}
contrasts(testPreparation$Group) <- contr.hypothesis(
  
  noCourse ~ 0, 
  course ~ noCourse,
  
  levels = levels(testPreparation$Group))
```

```{r}
contrasts(testPreparation$Group)
```

```{r}
modeloA <- lm(SAT ~ 1 + Group, data = testPreparation)
```

```{r}
modeloA |>
  tidy(conf.int = TRUE) |>
  select(term, estimate, conf.low, conf.high, p.value) |>
  mutate(p.value = round(p.value, 2))
```

```{r}
resumen <- testPreparation |>
  summarise(.by = Group, medias = mean(SAT)) |>
  mutate(intercepto = medias[2], pendiente = medias[1] - medias[2])
```

```{r}
ggplot(resumen) +
  geom_point(
    aes(x = Group, y = medias)) +
  geom_hline(
    aes(yintercept = intercepto), linetype = "dotted") +
  geom_segment(
    aes(x="course", xend="course", y=intercepto, yend=intercepto + pendiente))
```

# Ejemplo con un factor de tres niveles

En el libro, este ejemplo aparece en la página 178.

```{r}
feedback <- read_table("feedback.txt")
```

```{r}
feedback <- feedback |>
  mutate(Condition = fct(Condition, levels = c("NoFeedback", "Failure", "Success")))
```

Ahora veamos los códigos de contrastes asociados al factor.

```{r}
contrasts(feedback$Condition)
```

Con estos códigos, el grupo de referencia es `NoFeedback`, por lo tanto `lm()` realizará dos contrastes de medias:

1.  La media en `Task` del grupo *NoFeedback* con la media del grupo *Failure*.

2.  La media en `Task` del grupo *NoFeedback* con la media del grupo *Success*.

Estas comparaciones podrían ser de interés o no, según las hipótesis y los objetivos del estudio. Otra posibilidad sería comparar la media de *Failure* con la media de *NoFeedback*, para posteriormente comparar la media de *NoFeedback* con la media de *Success.*

```{r}
contrasts(feedback$Condition) <- contr.hypothesis(
  
  COM1 = Failure ~ NoFeedback, 
  COM2 = NoFeedback ~ Success,
  
  levels = c("NoFeedback", "Failure", "Success"))
```

```{r}
contrasts(feedback$Condition)
```

El número de comparaciones que podemos realizar está limitado por la cantidad de niveles que tenga el factor. Si $m$ es la cantidad de niveles, entonces solo podemos realizar $m-1$ contrastes.

```{r}
modeloC <- lm(Task ~ 1, data = feedback)
modeloA <- lm(Task ~ 1 + Condition, data = feedback)
```

```{r}
anova(modeloC, modeloA) |>
  tidy()
```

```{r}
modeloA |>
  tidy(conf.int = TRUE) |>
  select(term, estimate, conf.low, conf.high, p.value) |>
  mutate(p.value = round(p.value, 2))
```

Los coeficientes de regresión representan diferencias de medias en `Task` entre los grupos definidos por el factor `Condition`.

```{r}
feedback |>
  summarise(.by = Condition, medias = mean(Task))
```

```{r}

# (Intercept)
(3.000	+ 3.750 + 4.375)/3

# ConditionCOM1
3.000 - 3.750	

# ConditionCOM2
3.750 - 4.375
```

```{r}
plot_model(modeloA, terms = "Condition", type = "pred")
```

```{r}
plot_model(modeloA, type = "est")
```

En conclusión, cuando estimamos modelos con variables categóricas (factores) debemos asociar códigos de contraste apropiados a los niveles de cada factor para que R lleve a cabo las comparaciones de medias que nos interese realizar.
